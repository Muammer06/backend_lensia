import { NextResponse } from 'next/server'
import type { Job } from '@prisma/client'
import { prisma } from '@/lib/prisma'
import { processComfyUIJob } from '@/lib/comfyui'
import { sendWebhookToLensia, sendCustomWebhook } from '@/lib/webhook'

export async function POST(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    
    // ƒ∞≈üi veritabanƒ±ndan al
    const job = await prisma.job.findUnique({
      where: { id }
    })
    
    if (!job) {
      return NextResponse.json(
        { error: 'ƒ∞≈ü bulunamadƒ±' },
        { status: 404 }
      )
    }
    
    if (job.status === 'processing') {
      return NextResponse.json(
        { error: 'Bu i≈ü zaten i≈üleniyor' },
        { status: 400 }
      )
    }
    
    // ƒ∞≈ü durumunu "processing" olarak g√ºncelle
    await prisma.job.update({
      where: { id },
      data: { status: 'processing' }
    })
    
    // ComfyUI i≈ülemini ba≈ülat (async olarak)
    processJobAsync(id, job)
    
    return NextResponse.json({
      message: 'ƒ∞≈ü i≈üleme alƒ±ndƒ±',
      jobId: id
    })
    
  } catch (error) {
    console.error('ƒ∞≈ü i≈ülenirken hata:', error)
    return NextResponse.json(
      { error: 'ƒ∞≈ü i≈ülenirken bir hata olu≈ütu' },
      { status: 500 }
    )
  }
}

/**
 * ƒ∞≈üi asenkron olarak i≈üler ve sonucu Lensia.ai'ye g√∂nderir
 */
async function processJobAsync(jobId: string, job: Job) {
  try {
    const params = JSON.parse(job.paramsJson)
    
    console.log(`üé® ComfyUI i≈ülemi ba≈ülatƒ±lƒ±yor: ${jobId}`)
    
    const result = await processComfyUIJob({
      prompt: job.prompt,
      negativePrompt: job.negativePrompt || undefined,
      inputImageUrl: job.inputImageUrl,
      ...params
    })
    
    if (result.success) {
      // ƒ∞≈üi tamamlandƒ± olarak i≈üaretle
      await prisma.job.update({
        where: { id: jobId },
        data: {
          status: 'completed',
          outputImageUrl: result.outputImageUrl
        }
      })
      
      console.log(`‚úÖ ƒ∞≈ü tamamlandƒ±: ${jobId}`)
      
      // Lensia.ai'ye webhook g√∂nder
      if (job.lensiaJobId || job.webhookUrl) {
        console.log(`üì§ Webhook g√∂nderiliyor...`)
        
        let webhookSuccess = false
        
        if (job.webhookUrl) {
          // √ñzel webhook URL varsa oraya g√∂nder
          webhookSuccess = await sendCustomWebhook(job.webhookUrl, {
            job_id: job.lensiaJobId || jobId,
            status: 'completed',
            output_image_url: result.outputImageUrl,
            processed_at: new Date().toISOString()
          })
        } else {
          // Varsayƒ±lan Lensia webhook'una g√∂nder
          webhookSuccess = await sendWebhookToLensia({
            jobId,
            lensiaJobId: job.lensiaJobId ?? undefined,
            status: 'completed',
            outputImageUrl: result.outputImageUrl
          })
        }
        
        // Webhook durumunu g√ºncelle
        await prisma.job.update({
          where: { id: jobId },
          data: {
            webhookSent: webhookSuccess,
            webhookSentAt: webhookSuccess ? new Date() : null,
            status: webhookSuccess ? 'sent' : 'completed'
          }
        })
        
        if (webhookSuccess) {
          console.log(`‚úÖ Webhook ba≈üarƒ±yla g√∂nderildi`)
        } else {
          console.error(`‚ùå Webhook g√∂nderilemedi`)
        }
      }
      
    } else {
      // Hata durumu
      await prisma.job.update({
        where: { id: jobId },
        data: {
          status: 'error',
          errorMessage: result.error
        }
      })
      
      console.error(`‚ùå ƒ∞≈ü ba≈üarƒ±sƒ±z: ${jobId} - ${result.error}`)
      
      // Hata durumunda da webhook g√∂nder
      if (job.lensiaJobId || job.webhookUrl) {
        if (job.webhookUrl) {
          await sendCustomWebhook(job.webhookUrl, {
            job_id: job.lensiaJobId || jobId,
            status: 'error',
            error_message: result.error,
            processed_at: new Date().toISOString()
          })
        } else {
          await sendWebhookToLensia({
            jobId,
            lensiaJobId: job.lensiaJobId ?? undefined,
            status: 'error',
            errorMessage: result.error
          })
        }
        
        await prisma.job.update({
          where: { id: jobId },
          data: { webhookSent: true, webhookSentAt: new Date() }
        })
      }
    }
    
  } catch (error) {
    console.error('ComfyUI i≈ülem hatasƒ±:', error)
    await prisma.job.update({
      where: { id: jobId },
      data: {
        status: 'error',
        errorMessage: error instanceof Error ? error.message : 'Bilinmeyen hata'
      }
    })
    
    // Hata durumunda webhook g√∂nder
    if (job.lensiaJobId || job.webhookUrl) {
      if (job.webhookUrl) {
        await sendCustomWebhook(job.webhookUrl, {
          job_id: job.lensiaJobId || jobId,
          status: 'error',
          error_message: error instanceof Error ? error.message : 'Unknown error',
          processed_at: new Date().toISOString()
        })
      } else {
        await sendWebhookToLensia({
          jobId,
          lensiaJobId: job.lensiaJobId ?? undefined,
          status: 'error',
          errorMessage: error instanceof Error ? error.message : 'Unknown error'
        })
      }
    }
  }
}
